{
	"info": {
		"_postman_id": "ce046e7d-26e0-4616-bc2d-26dc08aaa23e",
		"name": "Weather Forecast",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33841337"
	},
	"item": [
		{
			"name": "Manual Tests",
			"item": [
				{
					"name": "1. Correct status",
					"item": [
						{
							"name": "1. Correct status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2. Return expected data",
					"item": [
						{
							"name": "2. Return expected data",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3. Invalid request",
					"item": [
						{
							"name": "Changed to bad http",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts15",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts15"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4. Correct data with filtering",
					"item": [
						{
							"name": "Filtering data (by temperature)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minTemperature=20&maxTemperature=25",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minTemperature",
											"value": "20"
										},
										{
											"key": "maxTemperature",
											"value": "25"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by humidity)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minHumidity=30&maxHumidity=70",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minHumidity",
											"value": "30"
										},
										{
											"key": "maxHumidity",
											"value": "70"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by wind)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minWindSpeed=10&maxWindSpeed=20",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minWindSpeed",
											"value": "10"
										},
										{
											"key": "maxWindSpeed",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by precipitation)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minPrecipitation=45&maxPrecipitation=55",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minPrecipitation",
											"value": "45"
										},
										{
											"key": "maxPrecipitation",
											"value": "55"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5. Pagination",
					"item": [
						{
							"name": "Pagination",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?page=1&limit=5",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6. Test of special characters",
					"item": [
						{
							"name": "Search for city (München)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations?city=München",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									],
									"query": [
										{
											"key": "city",
											"value": "München"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "7. Multiple requests",
					"item": [
						{
							"name": "Filtering data (by temperature)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minTemperature=20&maxTemperature=25",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minTemperature",
											"value": "20"
										},
										{
											"key": "maxTemperature",
											"value": "25"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by humidity)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minHumidity=30&maxHumidity=70",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minHumidity",
											"value": "30"
										},
										{
											"key": "maxHumidity",
											"value": "70"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by wind)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minWindSpeed=10&maxWindSpeed=20",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minWindSpeed",
											"value": "10"
										},
										{
											"key": "maxWindSpeed",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by precipitation)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minPrecipitation=45&maxPrecipitation=55",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minPrecipitation",
											"value": "45"
										},
										{
											"key": "maxPrecipitation",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Pagination",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?page=1&limit=5",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for city (München)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations?city=München",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									],
									"query": [
										{
											"key": "city",
											"value": "München"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8. Get Put Post Delete",
					"item": [
						{
							"name": "Get location",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post location",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Turkiet\",\r\n    \"city\": \"München\",\r\n    \"timezone\": \"Pacific/Honolulu\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/api/locations",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put location",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Germany\",\r\n    \"city\": \"München\",\r\n    \"timezone\": \"Europe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/api/locations/662d4562e4d7f06f834be3ba",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations",
										"662d4562e4d7f06f834be3ba"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete location",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations/662d4563e4d7f06f834be3bf",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations",
										"662d4563e4d7f06f834be3bf"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9. Check update is working",
					"item": [
						{
							"name": "Get location",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations/662d4562e4d7f06f834be3ba",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations",
										"662d4562e4d7f06f834be3ba"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put location",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Germany\",\r\n    \"city\": \"München\",\r\n    \"timezone\": \"Europe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/api/locations/662d4562e4d7f06f834be3ba",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations",
										"662d4562e4d7f06f834be3ba"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10. Multiple requests",
					"item": [
						{
							"name": "Filtering data (by temperature)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minTemperature=20&maxTemperature=25",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minTemperature",
											"value": "20"
										},
										{
											"key": "maxTemperature",
											"value": "25"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by humidity)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minHumidity=30&maxHumidity=70",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minHumidity",
											"value": "30"
										},
										{
											"key": "maxHumidity",
											"value": "70"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by wind)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minWindSpeed=10&maxWindSpeed=20",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minWindSpeed",
											"value": "10"
										},
										{
											"key": "maxWindSpeed",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by precipitation)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minPrecipitation=45&maxPrecipitation=55",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minPrecipitation",
											"value": "45"
										},
										{
											"key": "maxPrecipitation",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Pagination",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?page=1&limit=5",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for city (München)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations?city=München",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									],
									"query": [
										{
											"key": "city",
											"value": "München"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "11. Connection failure",
					"item": [
						{
							"name": "Disconnected",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations?disconnect=true",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									],
									"query": [
										{
											"key": "disconnect",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post location",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Germany\",\r\n    \"city\": \"München\",\r\n    \"timezone\": \"Pacific/Honolulu\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/api/locations",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Connected",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations?disconnect=false",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									],
									"query": [
										{
											"key": "disconnect",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "12. Invalid parameters",
					"item": [
						{
							"name": "Invalid City",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations/?city=malmo",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations",
										""
									],
									"query": [
										{
											"key": "city",
											"value": "malmo"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "13. Rate limit",
					"item": [
						{
							"name": "Get 4 times to test limit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Automated Tests",
			"item": [
				{
					"name": "1. Correct status",
					"item": [
						{
							"name": "1. Correct status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2. Return expected data",
					"item": [
						{
							"name": "2. Return expected data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/api/weather-forecasts",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3. Invalid request",
					"item": [
						{
							"name": "Changed to bad http",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 for not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/invalidhttp",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"invalidhttp"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4. Correct data with filtering Copy",
					"item": [
						{
							"name": "Filtering data (by temperature)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Temperature is within the specified range\", function () {\r",
											"    var jsonData = pm.response.json().docs;\r",
											"    jsonData.forEach(function(forecast) {\r",
											"        pm.expect(forecast.temperature).to.be.at.least(20);\r",
											"        pm.expect(forecast.temperature).to.be.below(26); \r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minTemperature=20&maxTemperature=25",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minTemperature",
											"value": "20"
										},
										{
											"key": "maxTemperature",
											"value": "25"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by humidity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Humidity is within the specified range\", function () {\r",
											"    var jsonData = pm.response.json().docs;\r",
											"    jsonData.forEach(function(forecast) {\r",
											"        pm.expect(forecast.humidity).to.be.at.least(30);\r",
											"        pm.expect(forecast.humidity).to.be.at.most(70);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minHumidity=30&maxHumidity=70",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minHumidity",
											"value": "30"
										},
										{
											"key": "maxHumidity",
											"value": "70"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by windspeed)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wind speed is within the specified range\", function () {\r",
											"    var jsonData = pm.response.json().docs;\r",
											"    jsonData.forEach(function(forecast) {\r",
											"        pm.expect(forecast.windSpeed).to.be.at.least(10);\r",
											"        pm.expect(forecast.windSpeed).to.be.at.most(20);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minWindSpeed=10&maxWindSpeed=20",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minWindSpeed",
											"value": "10"
										},
										{
											"key": "maxWindSpeed",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by precipitation)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Precipitation is within the specified range\", function () {\r",
											"    var jsonData = pm.response.json().docs;\r",
											"    jsonData.forEach(function(forecast) {\r",
											"        pm.expect(forecast.precipitation).to.be.at.least(45);\r",
											"        pm.expect(forecast.precipitation).to.be.at.most(55);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minPrecipitation=45&maxPrecipitation=55",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minPrecipitation",
											"value": "45"
										},
										{
											"key": "maxPrecipitation",
											"value": "55"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5. Pagination",
					"item": [
						{
							"name": "Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Page is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.page).to.eql(1);\r",
											"});\r",
											"pm.test(\"Limit count is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.limit).to.eql(5);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?page=1&limit=5",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6. Test of special characters",
					"item": [
						{
							"name": "Search for city (München)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Correct city with special characters is returned\", function() {\r",
											"    const city = pm.response.json();\r",
											"     pm.expect(city[0].city).to.eql(\"München\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations?city=München",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									],
									"query": [
										{
											"key": "city",
											"value": "München"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "7. Multiple requests",
					"item": [
						{
							"name": "Filtering data (by temperature)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minTemperature=20&maxTemperature=25",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minTemperature",
											"value": "20"
										},
										{
											"key": "maxTemperature",
											"value": "25"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by humidity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minHumidity=30&maxHumidity=70",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minHumidity",
											"value": "30"
										},
										{
											"key": "maxHumidity",
											"value": "70"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by wind)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minWindSpeed=10&maxWindSpeed=20",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minWindSpeed",
											"value": "10"
										},
										{
											"key": "maxWindSpeed",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by precipitation)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minPrecipitation=45&maxPrecipitation=55",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minPrecipitation",
											"value": "45"
										},
										{
											"key": "maxPrecipitation",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?page=1&limit=5",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for city (München)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations?city=München",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									],
									"query": [
										{
											"key": "city",
											"value": "München"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8. Get Put Post Delete",
					"item": [
						{
							"name": "Get location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json()\r",
											"pm.environment.set(\"tempID\", jsonData._id)\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Somalien\",\r\n    \"city\": \"München\",\r\n    \"timezone\": \"Pacific/Honolulu\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/api/locations",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"China\",\r\n    \"city\": \"München\",\r\n    \"timezone\": \"Europe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/api/locations/{{tempID}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations",
										"{{tempID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.message).to.eql('Platsen har raderats!');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations/{{tempID}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations",
										"{{tempID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9. Check update is working",
					"item": [
						{
							"name": "Get location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations/662d4562e4d7f06f834be3ba",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations",
										"662d4562e4d7f06f834be3ba"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 with correct data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.country, \"Country should be Germany\").to.eql('Germany');\r",
											"    pm.expect(response.city, \"City should be München\").to.eql('München');\r",
											"    pm.expect(response.timezone, \"Timezone should be Europe\").to.eql('Europe');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Germany\",\r\n    \"city\": \"München\",\r\n    \"timezone\": \"Europe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/api/locations/662d4562e4d7f06f834be3ba",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations",
										"662d4562e4d7f06f834be3ba"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10. Multiple requests",
					"item": [
						{
							"name": "Filtering data (by temperature)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by humidity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minHumidity=30&maxHumidity=70",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minHumidity",
											"value": "30"
										},
										{
											"key": "maxHumidity",
											"value": "70"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by wind)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minWindSpeed=10&maxWindSpeed=20",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minWindSpeed",
											"value": "10"
										},
										{
											"key": "maxWindSpeed",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filtering data (by precipitation)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?minPrecipitation=45&maxPrecipitation=55",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "minPrecipitation",
											"value": "45"
										},
										{
											"key": "maxPrecipitation",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/weather-forecasts?page=1&limit=5",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather-forecasts"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for city (München)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations?city=München",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									],
									"query": [
										{
											"key": "city",
											"value": "München"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "11. Connection failure",
					"item": [
						{
							"name": "Disconnected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500 and error message\", function() {\r",
											"    pm.response.to.have.status(500);\r",
											"    pm.expect(pm.response.text()).to.include(\"Ett fel uppstod på servern vid hämtning av platser.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations?disconnect=true",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									],
									"query": [
										{
											"key": "disconnect",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500 and error message\", function() {\r",
											"    pm.response.to.have.status(500);\r",
											"    pm.expect(pm.response.text()).to.include(\"Ett fel uppstod på servern vid skapande av ny plats.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"country\": \"Germany\",\r\n    \"city\": \"München\",\r\n    \"timezone\": \"Pacific/Honolulu\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/api/locations",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"List of locations\", function() {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.an('array');\r",
											"    pm.expect(response.length).to.be.above(0);\r",
											"    response.forEach((location) => {\r",
											"        pm.expect(location).to.have.property('city');  \r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations?disconnect=false",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									],
									"query": [
										{
											"key": "disconnect",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "12. Invalid parameters",
					"item": [
						{
							"name": "Invalid City",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 and error message\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Staden hittades inte.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations/?city=svengland",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations",
										""
									],
									"query": [
										{
											"key": "city",
											"value": "svengland"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "13. Rate limit",
					"item": [
						{
							"name": "Get 4 times to test limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 or 429 depending on rate limit\", function () {\r",
											"    if (pm.info.iteration < 100) {\r",
											"        pm.response.to.have.status(200);\r",
											"    } else {\r",
											"        pm.response.to.have.status(429);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/locations",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}